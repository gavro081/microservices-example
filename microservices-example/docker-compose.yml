services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672" # port for spring boot services
      - "15672:15672" # port for management web ui
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - microservices-network

  user-db:
    image: postgres:16-alpine
    container_name: user-db
    hostname: user-db
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=useruser
      - POSTGRES_PASSWORD=userpass
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U useruser -d user_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-db:
    image: postgres:16-alpine
    container_name: product-db
    hostname: product-db
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=product_service_db
      - POSTGRES_USER=productuser
      - POSTGRES_PASSWORD=productpass
    volumes:
      - product-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productuser -d product_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-db:
    image: postgres:16-alpine
    container_name: order-db
    hostname: order-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=order_service_db
      - POSTGRES_USER=orderuser
      - POSTGRES_PASSWORD=orderpass
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d order_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: user-service
    hostname: user-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_service_db
      - SPRING_DATASOURCE_USERNAME=useruser
      - SPRING_DATASOURCE_PASSWORD=userpass
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - microservices-network

  product-service:
    build:
      context: .
      dockerfile: ./product-service/Dockerfile
    container_name: product-service
    hostname: product-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-db:5432/product_service_db
      - SPRING_DATASOURCE_USERNAME=productuser
      - SPRING_DATASOURCE_PASSWORD=productpass
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      product-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - microservices-network

  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile
    container_name: order-service
    hostname: order-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-db:5432/order_service_db
      - SPRING_DATASOURCE_USERNAME=orderuser
      - SPRING_DATASOURCE_PASSWORD=orderpass
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - MICROSERVICES_PRODUCT_SERVICE_URL=http://product-service:8081
      - MICROSERVICES_USER_SERVICE_URL=http://user-service:8082
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      product-service:
        condition: service_started
      user-service:
        condition: service_started
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  user-db-data:
  product-db-data:
  order-db-data:
